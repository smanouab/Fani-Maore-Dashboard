"""
Analyse Spatio-Temporelle des S√©ismes

Ce module fournit une analyse spatio-temporelle compl√®te des donn√©es sismiques incluant :
- Cartographie interactive avec Folium
- Heatmaps de densit√© sismique
- Analyse des distances par rapport aux points d'int√©r√™t (Fani Maor√©, Mayotte)
- Filtres temporels, de magnitude et de profondeur
- Analyses par p√©riodes temporelles multiples

Converti depuis Jupyter notebook vers Streamlit.
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
from datetime import datetime, timedelta
import matplotlib.ticker as ticker
import matplotlib as mpl
from math import radians, cos, sin, asin, sqrt
import sys
import os

# Supprimer les avertissements
warnings.filterwarnings('ignore')

# Ajouter utils au chemin pour le chargement des donn√©es
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'utils'))

# Import conditionnel de Folium et streamlit-folium
FOLIUM_AVAILABLE = False
try:
    import folium
    from folium.plugins import HeatMap, MarkerCluster
    from streamlit_folium import st_folium
    FOLIUM_AVAILABLE = True
except ImportError:
    st.warning("‚ö†Ô∏è streamlit-folium non install√©. Cartes interactives d√©sactiv√©es.")
    st.info("Pour installer : pip install streamlit-folium")

# Configuration des param√®tres d'affichage
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', 50)

# CSS personnalis√© pour le style
def apply_custom_css():
    st.markdown("""
    <style>
    .filter-label {
        font-weight: 600;
        color: #495057;
        margin-bottom: 5px;
        font-size: 13px;
    }
    
    /* R√©duire l'espacement global */
    .stSlider {
        margin-bottom: 0px !important;
    }
    
    .stMultiSelect {
        margin-bottom: 5px !important;
    }
    
    .stRadio {
        margin-bottom: 5px !important;
    }
    
    /* Masquer les labels par d√©faut */
    .stSlider > label {
        display: none !important;
    }
    
    .stMultiSelect > label {
        display: none !important;
    }
    
    .stRadio > label {
        display: none !important;
    }
    
    /* Compacter les √©l√©ments */
    .element-container {
        margin-bottom: 0px !important;
    }


    /* Match the green from your intro-section border */
    .stSlider > div > div > div > div {
    background-color: #2ecc71 !important;
    }

    
    /* R√©duire la taille des sliders */
    .stSlider > div {
        padding-top: 0px !important;
        padding-bottom: 5px !important;
    }
    
    /* R√©duire la taille des sliders */
    .stSlider > div {
        padding-top: 0px !important;
        padding-bottom: 5px !important;
    }
    
    .map-container {
        border: 2px solid #ddd;
        border-radius: 10px;
        padding: 0px;
        margin: 10px 0;
        background-color: white;
        width: 100%;
        margin-left: 0;
    }
    
    .filter-container {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 25px;
        border-radius: 20px;
        margin: 20px 0;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
        border: 1px solid rgba(46, 204, 113, 0.3);
        border-left: 4px solid #2ecc71;
    }
    
    .map-legend {
        background: white;
        padding: 15px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        border: 1px solid #ddd;
        margin: 10px 0;
        font-size: 12px;
    }
    
    .legend-item {
        display: flex;
        align-items: center;
        margin: 5px 0;
    }
    
    .legend-color {
        width: 20px;
        height: 20px;
        border-radius: 50%;
        margin-right: 8px;
        border: 1px solid #333;
    }
    </style>
    """, unsafe_allow_html=True)

def show_analyse_spatio_temporelle():
    """Fonction principale pour afficher l'analyse spatio-temporelle - Version compacte"""
    
    # Appliquer le style personnalis√©
    apply_custom_css()
    
    # Obtenir les donn√©es filtr√©es depuis l'√©tat de session
    if 'filtered_df' not in st.session_state:
        st.error("‚ùå Donn√©es non disponibles. Veuillez retourner √† la page d'accueil.")
        return
    
    df_original = st.session_state.filtered_df.copy()
    
    if len(df_original) == 0:
        st.warning("‚ö†Ô∏è Aucune donn√©e ne correspond aux filtres s√©lectionn√©s.")
        return
    
    # Section des filtres compacts (retourne les donn√©es filtr√©es)
    df_filtered = show_spatial_filters(df_original)
    
    # V√©rifier si df_filtered est None (ajout de cette v√©rification)
    if df_filtered is None:
        st.error("‚ùå Erreur lors du filtrage des donn√©es.")
        return
    
    if len(df_filtered) == 0:
        st.info("üí° Ajustez les filtres pour voir les donn√©es.")
        return
    
    # S√©paration discr√®te
    st.markdown("---")
    
    # Afficher l'analyse selon le type s√©lectionn√© dans les filtres
    analysis_type = st.session_state.get('selected_analysis_type', 'Distribution temporelle')
    
    if analysis_type == "Distribution temporelle":
        show_temporal_distribution(df_filtered)
    elif analysis_type == "Carte des s√©ismes":
        if FOLIUM_AVAILABLE:
            show_interactive_map(df_filtered)
        else:
            show_fallback_map(df_filtered)
    elif analysis_type == "Analyse par magnitude":
        show_magnitude_analysis(df_filtered)
    elif analysis_type == "Corr√©lations":
        show_correlation_analysis(df_filtered)

def show_spatial_filters(df):
    """Afficher les filtres sp√©cifiques √† l'analyse spatiale - Version compacte"""
    
    with st.container():
        
        # Layout en colonnes pour compacter
        col1, col2 = st.columns([1, 1])
        
        with col1:
            # Filtre Ann√©es
            st.markdown('<div class="filter-label">Ann√©es:</div>', unsafe_allow_html=True)
            annee_min = int(df['Date_dt'].dt.year.min()) if 'Date_dt' in df.columns else 2018
            annee_max = int(df['Date_dt'].dt.year.max()) if 'Date_dt' in df.columns else 2025
            
            annees_range = st.slider(
                "Plage d'ann√©es",
                min_value=annee_min,
                max_value=annee_max,
                value=(annee_min, annee_max),
                key="annees_slider",
                label_visibility="collapsed"
            )
            st.caption(f"{annees_range[0]} ‚Äì {annees_range[1]}")
            
            # Filtre Magnitude
            st.markdown('<div class="filter-label">Magnitude:</div>', unsafe_allow_html=True)
            mag_min = float(df['Magnitude'].min())
            mag_max = float(df['Magnitude'].max())
            
            magnitude_range = st.slider(
                "Plage de magnitude",
                min_value=mag_min,
                max_value=mag_max,
                value=(mag_min, mag_max),
                step=0.01,
                format="%.2f",
                key="mag_slider_simple",
                label_visibility="collapsed"
            )
            st.caption(f"{magnitude_range[0]:.2f} ‚Äì {magnitude_range[1]:.2f}")
        
        with col2:
            # Filtre Profondeur
            st.markdown('<div class="filter-label">Profondeur:</div>', unsafe_allow_html=True)
            prof_min = float(df['Profondeur'].min())
            prof_max = float(df['Profondeur'].max())
            
            profondeur_range = st.slider(
                "Plage de profondeur",
                min_value=prof_min,
                max_value=prof_max,
                value=(prof_min, prof_max),
                step=1.0,
                format="%.1f",
                key="prof_slider_simple",
                label_visibility="collapsed"
            )
            st.caption(f"{profondeur_range[0]:.1f} ‚Äì {profondeur_range[1]:.1f}")
            
            # Options d'analyse compactes
            st.markdown('<div class="filter-label">Type d\'analyse:</div>', unsafe_allow_html=True)
            
            analysis_type = st.radio(
                "Type d'analyse s√©lectionn√©",
                options=[
                    "Distribution temporelle",
                    "Carte des s√©ismes", 
                    "Analyse par magnitude",
                    "Corr√©lations"
                ],
                index=0,
                key="analysis_type_radio",
                label_visibility="collapsed"
            )
        
        # Filtre Mois sur toute la largeur mais compact
        st.markdown('<div class="filter-label">Mois:</div>', unsafe_allow_html=True)
        mois_options = [
            "Jan", "F√©v", "Mar", "Avr", "Mai", "Jun",
            "Jul", "Ao√ª", "Sep", "Oct", "Nov", "D√©c"
        ]
        
        selected_mois = st.multiselect(
            "S√©lection des mois",
            options=mois_options,
            default=mois_options,
            key="mois_multiselect",
            label_visibility="collapsed"
        )
        
        # Bouton et r√©sultat sur une ligne
        col1, col2, col3 = st.columns([1, 1, 1])
        with col2:
            apply_filters = st.button(
                "Appliquer",
                key="apply_filters_btn",
                use_container_width=True,
                type="primary"
            )
    
    # Appliquer les filtres
    df_filtered = apply_simple_filters(df, annees_range, selected_mois, magnitude_range, profondeur_range)
    
    # Stocker les donn√©es filtr√©es et le type d'analyse
    st.session_state.filtered_df = df_filtered
    st.session_state.selected_analysis_type = analysis_type
    
    # Afficher les r√©sultats de mani√®re compacte
    if len(df_filtered) == 0:
        st.error("‚ùå Aucune donn√©e")
    else:
        percentage = (len(df_filtered) / len(df)) * 100
        st.success(f"‚úÖ {len(df_filtered):,} s√©ismes ({percentage:.0f}%)")
    
    return df_filtered  # Important: s'assurer que la fonction retourne toujours un DataFrame

def apply_simple_filters(df, annees_range, selected_mois, magnitude_range, profondeur_range):
    """Appliquer les filtres de mani√®re simple"""
    
    df_filtered = df.copy()
    
    # Filtre par ann√©es
    if 'Date_dt' in df_filtered.columns:
        df_filtered = df_filtered[
            (df_filtered['Date_dt'].dt.year >= annees_range[0]) & 
            (df_filtered['Date_dt'].dt.year <= annees_range[1])
        ]
        
        # Filtre par mois (noms courts)
        if selected_mois:
            mois_mapping = {
                "Jan": 1, "F√©v": 2, "Mar": 3, "Avr": 4,
                "Mai": 5, "Jun": 6, "Jul": 7, "Ao√ª": 8,
                "Sep": 9, "Oct": 10, "Nov": 11, "D√©c": 12
            }
            selected_month_numbers = [mois_mapping[mois] for mois in selected_mois if mois in mois_mapping]
            if selected_month_numbers:
                df_filtered = df_filtered[df_filtered['Date_dt'].dt.month.isin(selected_month_numbers)]
    
    # Filtre par magnitude
    df_filtered = df_filtered[
        (df_filtered['Magnitude'] >= magnitude_range[0]) & 
        (df_filtered['Magnitude'] <= magnitude_range[1])
    ]
    
    # Filtre par profondeur
    df_filtered = df_filtered[
        (df_filtered['Profondeur'] >= profondeur_range[0]) & 
        (df_filtered['Profondeur'] <= profondeur_range[1])
    ]
    
    return df_filtered

def show_interactive_map(df):
    """Afficher la carte interactive avec toutes les fonctionnalit√©s"""
    
    if not FOLIUM_AVAILABLE:
        st.error("‚ùå Folium non disponible pour les cartes interactives")
        show_fallback_map(df)
        return
    
    st.subheader("üó∫Ô∏è Carte Interactive des S√©ismes")
    
    if len(df) == 0:
        st.warning("Aucune donn√©e √† afficher sur la carte.")
        return
    
    # Informations sur les donn√©es affich√©es
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("S√©ismes affich√©s", len(df))
    with col2:
        st.metric("Magnitude moyenne", f"{df['Magnitude'].mean():.2f}")
    with col3:
        st.metric("Profondeur moyenne", f"{df['Profondeur'].mean():.1f} km")
    with col4:
        if 'Date_dt' in df.columns:
            period_days = (df['Date_dt'].max() - df['Date_dt'].min()).days
            st.metric("P√©riode", f"{period_days} jours")
        else:
            st.metric("P√©riode", "N/A")
    
    # Cr√©er la carte avec l√©gende int√©gr√©e
    try:
        carte = creer_carte_seismes_complete(df)
        
        # Afficher la carte avec streamlit-folium - Pleine largeur
        st.markdown('<div class="map-container">', unsafe_allow_html=True)
        map_data = st_folium(carte, width="100%", height=600, returned_objects=["last_object_clicked"])
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Afficher les informations sur le dernier point cliqu√©
        if map_data["last_object_clicked"]:
            st.info(f"üìç Dernier point cliqu√©: {map_data['last_object_clicked']}")
            
    except Exception as e:
        st.error(f"Erreur lors de la cr√©ation de la carte: {e}")
        st.warning("Affichage d'une carte simplifi√©e...")
        show_fallback_map(df)

def creer_carte_seismes_complete(df_filtered):
    """Cr√©er une carte compl√®te des s√©ismes avec toutes les fonctionnalit√©s"""
    
    if not FOLIUM_AVAILABLE:
        raise ImportError("Folium non disponible")
    
    # Coordonn√©es pr√©cises du volcan Fani Maor√©
    fanimaore = {
        'nom': 'Fani Maor√©',
        'lat': -12.80,  # 12¬∞ 48‚Ä≤ sud
        'lon': 45.467   # 45¬∞ 28‚Ä≤ est
    }
    
    # Coordonn√©es des principales √Æles et villes de Mayotte
    mayotte_points = [
        # √éles principales
        {'nom': 'Grande-Terre', 'lat': -12.7817, 'lon': 45.2269, 'type': '√Æle', 'color': 'green'},
        {'nom': 'Petite-Terre', 'lat': -12.7892, 'lon': 45.2804, 'type': '√Æle', 'color': 'green'},
        
        # Villes principales
        {'nom': 'Mamoudzou', 'lat': -12.7806, 'lon': 45.2278, 'type': 'ville', 'color': 'blue'},
        {'nom': 'Dzaoudzi', 'lat': -12.7878, 'lon': 45.2814, 'type': 'ville', 'color': 'blue'},
        {'nom': 'Koungou', 'lat': -12.7333, 'lon': 45.2000, 'type': 'ville', 'color': 'blue'},
        {'nom': 'Demb√©ni', 'lat': -12.8333, 'lon': 45.1833, 'type': 'ville', 'color': 'blue'},
        {'nom': 'Pamandzi', 'lat': -12.8014, 'lon': 45.2881, 'type': 'ville', 'color': 'blue'},
        
        # Points g√©ographiques importants
        {'nom': 'A√©roport de Mayotte', 'lat': -12.8047, 'lon': 45.2808, 'type': 'infrastructure', 'color': 'purple'},
        {'nom': 'Port de Longoni', 'lat': -12.7167, 'lon': 45.1833, 'type': 'infrastructure', 'color': 'purple'},
        
        # Points g√©ologiques d'int√©r√™t
        {'nom': 'Mont B√©nara', 'lat': -12.8167, 'lon': 45.1833, 'type': 'g√©ologique', 'color': 'brown'},
        {'nom': 'Mont Choungui', 'lat': -12.9000, 'lon': 45.1167, 'type': 'g√©ologique', 'color': 'brown'},
    ]
    
    # Cr√©er une carte centr√©e entre Mayotte et Fani Maor√©
    center_lat = (fanimaore['lat'] + mayotte_points[0]['lat']) / 2
    center_lon = (fanimaore['lon'] + mayotte_points[0]['lon']) / 2
    
    m = folium.Map(
        location=[center_lat, center_lon], 
        zoom_start=8,
        tiles='CartoDB positron'
    )
    
    # Ajouter la heatmap
    heat_data = [[row['Latitude'], row['Longitude'], row['Magnitude']] 
                for _, row in df_filtered.iterrows()]
    
    HeatMap(heat_data, radius=15, blur=10).add_to(m)
    
    # Cr√©er un cluster pour les s√©ismes
    marker_cluster = MarkerCluster(name="S√©ismes").add_to(m)
    
    # Ajouter des marqueurs pour chaque s√©isme (√©chantillon)
    sample_size = min(100, len(df_filtered))  # Limiter pour la performance
    for _, row in df_filtered.sample(sample_size).iterrows():
        
        # Cr√©er le popup
        popup_html = f"""
        <div style="width: 220px; font-family: Arial; font-size: 12px;">
            <h4 style="margin: 0 0 5px 0; color: #2c3e50;">üåç S√©isme</h4>
            <hr style="margin: 2px 0; border-color: #eee;">
            <p><b>‚ö° Magnitude:</b> {row['Magnitude']:.2f}</p>
            <p><b>üï≥Ô∏è Profondeur:</b> {row['Profondeur']:.1f} km</p>
            <p><b>üìç Coordonn√©es:</b> {row['Latitude']:.4f}, {row['Longitude']:.4f}</p>
        </div>
        """
        
        marker = folium.CircleMarker(
            location=[row['Latitude'], row['Longitude']],
            radius=max(3, row['Magnitude'] * 1.5),
            color='red',
            fill=True,
            popup=folium.Popup(popup_html, max_width=300),
            tooltip=f"Magnitude {row['Magnitude']:.1f}"
        )
        
        marker.add_to(marker_cluster)
    
    # Ajouter le marqueur du volcan Fani Maor√©
    folium.Marker(
        location=[fanimaore['lat'], fanimaore['lon']],
        popup=f"""
        <div style="width: 200px; font-family: Arial; font-size: 12px;">
            <h4 style="margin: 0 0 5px 0; color: #c0392b;">üåã {fanimaore['nom']}</h4>
            <hr style="margin: 2px 0; border-color: #eee;">
            <p><b>Type:</b> Volcan sous-marin actif</p>
            <p><b>Coordonn√©es:</b> {fanimaore['lat']:.4f}, {fanimaore['lon']:.4f}</p>
            <p><b>Statut:</b> Surveillance continue</p>
        </div>
        """,
        tooltip="Fani Maor√© - Volcan sous-marin",
        icon=folium.Icon(color='red', icon='fire', prefix='fa')
    ).add_to(m)
    
    # Ajouter tous les points d'int√©r√™t de Mayotte
    for point in mayotte_points:
        
        # D√©finir l'ic√¥ne selon le type
        if point['type'] == '√Æle':
            icon_name = 'leaf'
            icon_prefix = 'fa'
        elif point['type'] == 'ville':
            icon_name = 'home'
            icon_prefix = 'fa'
        elif point['type'] == 'infrastructure':
            icon_name = 'cog'
            icon_prefix = 'fa'
        elif point['type'] == 'g√©ologique':
            icon_name = 'mountain'
            icon_prefix = 'fa'
        else:
            icon_name = 'info-sign'
            icon_prefix = 'glyphicon'
        
        # Cr√©er le popup d√©taill√©
        popup_html = f"""
        <div style="width: 180px; font-family: Arial; font-size: 12px;">
            <h4 style="margin: 0 0 5px 0; color: {point['color']};">üìç {point['nom']}</h4>
            <hr style="margin: 2px 0; border-color: #eee;">
            <p><b>Type:</b> {point['type'].title()}</p>
            <p><b>Coordonn√©es:</b> {point['lat']:.4f}, {point['lon']:.4f}</p>
        </div>
        """
        
        folium.Marker(
            location=[point['lat'], point['lon']],
            popup=folium.Popup(popup_html, max_width=250),
            tooltip=f"{point['nom']} ({point['type']})",
            icon=folium.Icon(color=point['color'], icon=icon_name, prefix=icon_prefix)
        ).add_to(m)
    
    # Ajouter les cercles de distance autour de Fani Maor√© avec couleurs plus fonc√©es
    distance_colors = [
        {'radius': 5000, 'color': '#CC0000', 'opacity': 0.8, 'fill_opacity': 0.2},   # 5 km - Rouge fonc√©
        {'radius': 10000, 'color': '#FF6600', 'opacity': 0.7, 'fill_opacity': 0.15}, # 10 km - Orange fonc√©  
        {'radius': 20000, 'color': '#CCCC00', 'opacity': 0.6, 'fill_opacity': 0.12}, # 20 km - Jaune fonc√©
        {'radius': 50000, 'color': '#008800', 'opacity': 0.5, 'fill_opacity': 0.08}  # 50 km - Vert fonc√©
    ]
    
    for circle_info in distance_colors:
        folium.Circle(
            location=[fanimaore['lat'], fanimaore['lon']],
            radius=circle_info['radius'],
            color=circle_info['color'],
            weight=2,
            opacity=circle_info['opacity'],
            fill=True,
            fill_color=circle_info['color'],
            fill_opacity=circle_info['fill_opacity'],
            popup=f"Rayon de {circle_info['radius']/1000:.0f} km autour de Fani Maor√©",
            tooltip=f"Distance: {circle_info['radius']/1000:.0f} km"
        ).add_to(m)
    
    # Ajouter un contr√¥le de couches
    folium.LayerControl().add_to(m)
    
    # Ajouter une l√©gende directement sur la carte avec fond fonc√©
    legend_html = f"""
    <div style="position: fixed; 
                top: 10px; right: 10px; width: 220px; height: auto; 
                background-color: rgba(40, 40, 40, 0.95); border:2px solid #333; z-index:9999; 
                font-size:12px; padding: 15px; border-radius: 12px;
                box-shadow: 0 0 20px rgba(0,0,0,0.5); color: white;
                ">
    <h4 style="margin-top: 0px; text-align: center; color: #fff; border-bottom: 1px solid #555; padding-bottom: 8px;">Magnitude des s√©ismes</h4>
    <div style="background: linear-gradient(to right, #800080, #0000FF, #00FFFF, #00FF00, #FFFF00, #FFA500, #FF0000); 
                height: 18px; border-radius: 9px; margin: 10px 0; border: 1px solid #555;"></div>
    <div style="display: flex; justify-content: space-between; font-size: 11px; margin-bottom: 10px; color: #ccc;">
        <span><b>Faible</b></span>
        <span><b>Forte</b></span>
    </div>
    <div style="display: flex; justify-content: space-between; font-size: 11px; margin-bottom: 15px; color: #fff;">
        <span>{df_filtered['Magnitude'].min():.1f}</span>
        <span>{df_filtered['Magnitude'].max():.1f}</span>
    </div>
    
    <h5 style="color: #fff; margin: 15px 0 8px 0; border-bottom: 1px solid #555; padding-bottom: 5px;">Points d'int√©r√™t</h5>
    <div style="margin: 6px 0; color: #fff;"><span style="color: #FF4444;">üî¥</span> Fani Maor√© (volcan)</div>
    <div style="margin: 6px 0; color: #fff;"><span style="color: #44FF44;">üü¢</span> √éles principales</div>
    <div style="margin: 6px 0; color: #fff;"><span style="color: #4444FF;">üîµ</span> Villes</div>
    <div style="margin: 6px 0; color: #fff;"><span style="color: #AA44AA;">üü£</span> Infrastructures</div>
    <div style="margin: 6px 0; color: #fff;"><span style="color: #8B4513;">üü§</span> Points g√©ologiques</div>
    
    <h5 style="color: #fff; margin: 15px 0 8px 0; border-bottom: 1px solid #555; padding-bottom: 5px;">Cercles de distance</h5>
    <div style="margin: 4px 0; color: #fff;"><span style="color: #FF0000; font-size: 16px;">‚óè</span> 5 km (Fani Maor√©)</div>
    <div style="margin: 4px 0; color: #fff;"><span style="color: #FFA500; font-size: 16px;">‚óè</span> 10 km (Fani Maor√©)</div>
    <div style="margin: 4px 0; color: #fff;"><span style="color: #FFFF00; font-size: 16px;">‚óè</span> 20 km (Fani Maor√©)</div>
    <div style="margin: 4px 0; color: #fff;"><span style="color: #90EE90; font-size: 16px;">‚óè</span> 50 km (Fani Maor√©)</div>
    
    <div style="margin-top: 15px; padding-top: 10px; border-top: 1px solid #555; font-size: 11px; color: #ccc;">
        <div><b style="color: #fff;">Total s√©ismes:</b> {len(df_filtered)}</div>
        <div><b style="color: #fff;">Profondeur:</b> {df_filtered['Profondeur'].min():.0f}-{df_filtered['Profondeur'].max():.0f} km</div>
    </div>
    </div>
    """
    
    m.get_root().html.add_child(folium.Element(legend_html))
    
    return m

def show_fallback_map(df):
    """Carte de secours avec matplotlib si Folium √©choue"""
    
    fig, ax = plt.subplots(figsize=(12, 8))
    
    # Scatter plot des s√©ismes
    scatter = ax.scatter(
        df['Longitude'], df['Latitude'], 
        c=df['Magnitude'], 
        cmap='plasma', 
        alpha=0.6,
        s=df['Magnitude'] * 20,  # Taille proportionnelle √† la magnitude
        edgecolors='black',
        linewidths=0.5
    )
    
    # Ajouter la colorbar
    plt.colorbar(scatter, label='Magnitude', ax=ax)
    
    # Marquer Fani Maor√© et Mayotte
    ax.plot(45.467, -12.80, 'r^', markersize=15, label='Fani Maor√© (Volcan)')
    ax.plot(45.2269, -12.7817, 'gs', markersize=12, label='Grande-Terre (Mayotte)')
    
    ax.set_title(f'Carte des s√©ismes (Alternative simple) - {len(df)} √©v√©nements')
    ax.set_xlabel('Longitude')
    ax.set_ylabel('Latitude')
    ax.grid(True, alpha=0.3)
    ax.legend()
    
    # Am√©liorer l'apparence
    ax.set_facecolor('#f0f8ff')
    
    st.pyplot(fig)
    plt.close()

def haversine(lat1, lon1, lat2, lon2):
    """Calculer la distance entre deux points g√©ographiques using formule haversine"""
    # Convertir degr√©s en radians
    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])
    
    # Formule haversine
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    c = 2 * asin(sqrt(a))
    r = 6371  # Rayon de la Terre en km
    return c * r

def show_temporal_distribution(df):
    """Afficher l'analyse de distribution temporelle"""
    
    st.subheader("üìä Distribution Temporelle des S√©ismes")
    
    if len(df) == 0:
        st.warning("Aucune donn√©e pour l'analyse temporelle.")
        return
    
    # R√©cup√©rer la p√©riode s√©lectionn√©e
    period = st.session_state.get('temporal_period', 'Mois')
    
    # Assurer la compatibilit√© des colonnes temporelles
    if 'Date_dt' not in df.columns and 'Date' in df.columns:
        df = df.copy()
        df['Date_dt'] = pd.to_datetime(df['Date'])
    
    # Ajouter les colonnes temporelles si n√©cessaires
    if 'Annee' not in df.columns:
        df['Annee'] = df['Date_dt'].dt.year
    if 'Mois' not in df.columns:
        df['Mois'] = df['Date_dt'].dt.month
    if 'Jour' not in df.columns:
        df['Jour'] = df['Date_dt'].dt.day
    if 'Heure' not in df.columns:
        df['Heure'] = df['Date_dt'].dt.hour
    if 'JourSemaine' not in df.columns:
        df['JourSemaine'] = df['Date_dt'].dt.dayofweek
    
    fig, ax = plt.subplots(figsize=(14, 8))
    
    if period == 'Ann√©e':
        counts = df['Annee'].value_counts().sort_index()
        bars = ax.bar(counts.index, counts.values, color='#3498db', alpha=0.8)
        ax.set_xlabel('Ann√©e')
        ax.set_title(f'Distribution des s√©ismes par ann√©e ({len(df)} s√©ismes)')
        
    elif period == 'Mois':
        mois_noms = ['Jan', 'F√©v', 'Mar', 'Avr', 'Mai', 'Juin', 
                     'Juil', 'Ao√ªt', 'Sep', 'Oct', 'Nov', 'D√©c']
        counts = df['Mois'].value_counts().sort_index()
        bars = ax.bar(counts.index, counts.values, color='#e74c3c', alpha=0.8)
        ax.set_xlabel('Mois')
        ax.set_xticks(range(1, 13))
        ax.set_xticklabels(mois_noms, rotation=45)
        ax.set_title(f'Distribution des s√©ismes par mois ({len(df)} s√©ismes)')
        
    elif period == 'Jour':
        counts = df['Jour'].value_counts().sort_index()
        bars = ax.bar(counts.index, counts.values, color='#2ecc71', alpha=0.8)
        ax.set_xlabel('Jour du mois')
        ax.set_title(f'Distribution des s√©ismes par jour du mois ({len(df)} s√©ismes)')
        
    elif period == 'Heure':
        counts = df['Heure'].value_counts().sort_index()
        bars = ax.bar(counts.index, counts.values, color='#f39c12', alpha=0.8)
        ax.set_xlabel('Heure de la journ√©e')
        ax.set_xticks(range(0, 24, 2))
        ax.set_title(f'Distribution des s√©ismes par heure ({len(df)} s√©ismes)')
        
    elif period == 'Semaine':
        jours = ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim']
        counts = df['JourSemaine'].value_counts().sort_index()
        bars = ax.bar(counts.index, counts.values, color='#9b59b6', alpha=0.8)
        ax.set_xlabel('Jour de la semaine')
        ax.set_xticks(range(7))
        ax.set_xticklabels(jours, rotation=45)
        ax.set_title(f'Distribution des s√©ismes par jour de la semaine ({len(df)} s√©ismes)')
    
    # Ajouter des annotations sur les barres
    for bar in bars:
        height = bar.get_height()
        if height > 0:
            ax.text(bar.get_x() + bar.get_width()/2., height,
                   f'{int(height)}', ha='center', va='bottom', fontsize=10)
    
    ax.set_ylabel('Nombre de s√©ismes')
    ax.grid(True, alpha=0.3)
    ax.set_facecolor('#f8f9fa')
    
    plt.tight_layout()
    st.pyplot(fig)
    plt.close()

def show_magnitude_analysis(df):
    """Afficher l'analyse par magnitude"""
    
    st.subheader("üìà Analyse par Magnitude")
    
    if len(df) == 0:
        st.warning("Aucune donn√©e pour l'analyse des magnitudes.")
        return
    
    # Distribution des magnitudes
    fig, ax = plt.subplots(figsize=(12, 6))
    
    ax.hist(df['Magnitude'], bins=30, alpha=0.7, color='skyblue', edgecolor='black')
    ax.set_title('Distribution des magnitudes')
    ax.set_xlabel('Magnitude')
    ax.set_ylabel('Fr√©quence')
    ax.grid(True, alpha=0.3)
    ax.set_facecolor('#f8f9fa')
    
    plt.tight_layout()
    st.pyplot(fig)
    plt.close()
    
    # Statistiques
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üìä Statistiques des magnitudes")
        st.write(f"**Moyenne:** {df['Magnitude'].mean():.2f}")
        st.write(f"**M√©diane:** {df['Magnitude'].median():.2f}")
        st.write(f"**Min:** {df['Magnitude'].min():.2f}")
        st.write(f"**Max:** {df['Magnitude'].max():.2f}")
        st.write(f"**√âcart-type:** {df['Magnitude'].std():.2f}")
    
    with col2:
        st.markdown("### üéØ R√©partition par cat√©gorie")
        
        # Cat√©goriser les magnitudes
        bins = [0, 2.5, 4, 5, 6, 7, float('inf')]
        labels = ['Micro', 'Faible', 'L√©ger', 'Mod√©r√©', 'Fort', 'Majeur+']
        df_temp = df.copy()
        df_temp['MagnitudeCategorie'] = pd.cut(df_temp['Magnitude'], bins=bins, labels=labels)
        cat_counts = df_temp['MagnitudeCategorie'].value_counts().sort_index()
        
        for category, count in cat_counts.items():
            percentage = count / len(df) * 100
            st.write(f"**{category}:** {count} ({percentage:.1f}%)")

def show_correlation_analysis(df):
    """Afficher l'analyse des corr√©lations"""
    
    st.subheader("üîó Analyse des Corr√©lations")
    
    if len(df) == 0:
        st.warning("Aucune donn√©e pour l'analyse des corr√©lations.")
        return
    
    # S√©lectionner les colonnes num√©riques
    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    
    if len(numeric_cols) < 2:
        st.warning("Pas assez de colonnes num√©riques pour l'analyse des corr√©lations.")
        return
    
    # Calculer la matrice de corr√©lation
    corr_matrix = df[numeric_cols].corr()
    
    # Afficher la matrice
    fig, ax = plt.subplots(figsize=(10, 8))
    sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', 
                fmt='.2f', linewidths=0.5, ax=ax, center=0)
    
    ax.set_title('Matrice de corr√©lation')
    
    plt.tight_layout()
    st.pyplot(fig)
    plt.close()

def show_spatial_statistics(df):
    """Afficher les statistiques spatiales"""
    
    st.subheader("üìã Statistiques Spatiales")
    
    if len(df) == 0:
        st.warning("Aucune donn√©e pour les statistiques spatiales.")
        return
    
    # Coordonn√©es de r√©f√©rence
    fanimaore_lat, fanimaore_lon = -12.80, 45.467
    mayotte_lat, mayotte_lon = -12.7817, 45.2269
    
    # Calculer les distances pour tous les s√©ismes
    df_temp = df.copy()
    df_temp['Distance_Fanimaore'] = df_temp.apply(
        lambda row: haversine(row['Latitude'], row['Longitude'], fanimaore_lat, fanimaore_lon), 
        axis=1
    )
    df_temp['Distance_Mayotte'] = df_temp.apply(
        lambda row: haversine(row['Latitude'], row['Longitude'], mayotte_lat, mayotte_lon), 
        axis=1
    )
    
    # Statistiques g√©n√©rales
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("### üåç √âtendue g√©ographique")
        st.write(f"**Latitude min:** {df['Latitude'].min():.4f}¬∞")
        st.write(f"**Latitude max:** {df['Latitude'].max():.4f}¬∞")
        st.write(f"**Longitude min:** {df['Longitude'].min():.4f}¬∞")
        st.write(f"**Longitude max:** {df['Longitude'].max():.4f}¬∞")
        
        # Calculer l'aire approximative
        lat_range = df['Latitude'].max() - df['Latitude'].min()
        lon_range = df['Longitude'].max() - df['Longitude'].min()
        # Approximation grossi√®re en km¬≤
        area_approx = lat_range * 111 * lon_range * 111 * np.cos(np.radians(df['Latitude'].mean()))
        st.write(f"**Zone approximative:** {area_approx:.0f} km¬≤")
    
    with col2:
        st.markdown("### üåã Distances √† Fani Maor√©")
        st.write(f"**Distance min:** {df_temp['Distance_Fanimaore'].min():.1f} km")
        st.write(f"**Distance max:** {df_temp['Distance_Fanimaore'].max():.1f} km")
        st.write(f"**Distance moyenne:** {df_temp['Distance_Fanimaore'].mean():.1f} km")
        st.write(f"**Distance m√©diane:** {df_temp['Distance_Fanimaore'].median():.1f} km")
        
        # R√©partition par zones
        proche = len(df_temp[df_temp['Distance_Fanimaore'] <= 10])
        moyen = len(df_temp[(df_temp['Distance_Fanimaore'] > 10) & (df_temp['Distance_Fanimaore'] <= 50)])
        loin = len(df_temp[df_temp['Distance_Fanimaore'] > 50])
        
        st.write(f"**< 10 km:** {proche} ({proche/len(df)*100:.1f}%)")
        st.write(f"**10-50 km:** {moyen} ({moyen/len(df)*100:.1f}%)")
        st.write(f"**> 50 km:** {loin} ({loin/len(df)*100:.1f}%)")
    
    with col3:
        st.markdown("### üèùÔ∏è Distances √† Mayotte")
        st.write(f"**Distance min:** {df_temp['Distance_Mayotte'].min():.1f} km")
        st.write(f"**Distance max:** {df_temp['Distance_Mayotte'].max():.1f} km")
        st.write(f"**Distance moyenne:** {df_temp['Distance_Mayotte'].mean():.1f} km")
        st.write(f"**Distance m√©diane:** {df_temp['Distance_Mayotte'].median():.1f} km")
        
        # R√©partition par zones
        proche_m = len(df_temp[df_temp['Distance_Mayotte'] <= 20])
        moyen_m = len(df_temp[(df_temp['Distance_Mayotte'] > 20) & (df_temp['Distance_Mayotte'] <= 100)])
        loin_m = len(df_temp[df_temp['Distance_Mayotte'] > 100])
        
        st.write(f"**< 20 km:** {proche_m} ({proche_m/len(df)*100:.1f}%)")
        st.write(f"**20-100 km:** {moyen_m} ({moyen_m/len(df)*100:.1f}%)")
        st.write(f"**> 100 km:** {loin_m} ({loin_m/len(df)*100:.1f}%)")
    
    # Graphique des distributions de distance
    st.subheader("üìä Distribution des distances")
    
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))
    
    # Distribution des distances √† Fani Maor√©
    ax1.hist(df_temp['Distance_Fanimaore'], bins=30, alpha=0.7, color='red', edgecolor='black')
    ax1.set_title('Distribution des distances √† Fani Maor√©')
    ax1.set_xlabel('Distance (km)')
    ax1.set_ylabel('Nombre de s√©ismes')
    ax1.grid(True, alpha=0.3)
    ax1.axvline(df_temp['Distance_Fanimaore'].mean(), color='darkred', linestyle='--', 
               label=f'Moyenne: {df_temp["Distance_Fanimaore"].mean():.1f} km')
    ax1.legend()
    
    # Distribution des distances √† Mayotte
    ax2.hist(df_temp['Distance_Mayotte'], bins=30, alpha=0.7, color='green', edgecolor='black')
    ax2.set_title('Distribution des distances √† Mayotte')
    ax2.set_xlabel('Distance (km)')
    ax2.set_ylabel('Nombre de s√©ismes')
    ax2.grid(True, alpha=0.3)
    ax2.axvline(df_temp['Distance_Mayotte'].mean(), color='darkgreen', linestyle='--',
               label=f'Moyenne: {df_temp["Distance_Mayotte"].mean():.1f} km')
    ax2.legend()
    
    for ax in [ax1, ax2]:
        ax.set_facecolor('#f8f9fa')
    
    plt.tight_layout()
    st.pyplot(fig)
    plt.close()
    
    # Tableau des s√©ismes les plus proches
    st.subheader("üéØ S√©ismes les plus proches des points d'int√©r√™t")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üåã Plus proches de Fani Maor√©**")
        if 'Date_dt' in df_temp.columns:
            closest_fani = df_temp.nsmallest(5, 'Distance_Fanimaore')[
                ['Date_dt', 'Magnitude', 'Distance_Fanimaore']
            ].copy()
            closest_fani['Date_dt'] = closest_fani['Date_dt'].dt.strftime('%d/%m/%Y %H:%M')
            closest_fani.columns = ['Date', 'Magnitude', 'Distance (km)']
        else:
            closest_fani = df_temp.nsmallest(5, 'Distance_Fanimaore')[
                ['Magnitude', 'Distance_Fanimaore']
            ].copy()
            closest_fani.columns = ['Magnitude', 'Distance (km)']
        st.dataframe(closest_fani, hide_index=True)
    
    with col2:
        st.markdown("**üèùÔ∏è Plus proches de Mayotte**")
        if 'Date_dt' in df_temp.columns:
            closest_mayo = df_temp.nsmallest(5, 'Distance_Mayotte')[
                ['Date_dt', 'Magnitude', 'Distance_Mayotte']
            ].copy()
            closest_mayo['Date_dt'] = closest_mayo['Date_dt'].dt.strftime('%d/%m/%Y %H:%M')
            closest_mayo.columns = ['Date', 'Magnitude', 'Distance (km)']
        else:
            closest_mayo = df_temp.nsmallest(5, 'Distance_Mayotte')[
                ['Magnitude', 'Distance_Mayotte']
            ].copy()
            closest_mayo.columns = ['Magnitude', 'Distance (km)']
        st.dataframe(closest_mayo, hide_index=True)

# Fonction principale qui peut √™tre appel√©e depuis app.py
def main():
    """Fonction principale √† appeler depuis l'application principale"""
    show_analyse_spatio_temporelle()

if __name__ == "__main__":
    main()
